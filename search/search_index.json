{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udd45 Keeper \u00b6 A Gradle plugin that infers Proguard/R8 keep rules for androidTest sources. Keeper hooks into Proguard/R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. This is necessary because the Android Gradle Plugin (AGP) does not currently factor in androidTest usages of target app sources when running the minification step, which can result in runtime errors if APIs used by tests are removed. This is (really) useful only if you run your instrumentation tests against your minified release builds! If you don\u2019t run these tests against minified builds, then you don\u2019t need this plugin. The build type that you test against is controlled by the testBuildType flag, which is set to debug by default. This is a workaround until AGP supports this: https://issuetracker.google.com/issues/126429384 . Note: Keeper uses private APIs from AGP and could break between releases. It is currently tested against AGP versions 3.5.3, 3.6.0-rc01, and 4.0.0-alpha09 (or whatever ci_agp_version env vars are described here . Installation \u00b6 Keeper is distributed via Maven Central. Apply the keeper Gradle plugin in your application\u2019s build.gradle. buildscript { dependencies { classpath \"com.slack.keeper:keeper:x.y.z\" } } apply plugin: \"com.slack.keeper\" There are optional configurations available via the keeper extension, mostly just for debugging purposes or setting a custom R8 version. keeper { /** * R8 version, only used for PrintUses and does _not_ override the R8 version used for * minification. Must be a tag. Default defined below. */ r8Version = \"1.6.53\" /** * Optional custom jvm arguments to pass into the R8 `PrintUses` execution. Useful if you want * to enable debugging in R8. Default is empty. * * Example: `listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\")` */ r8JvmArgs = [] } Keeper uses R8\u2019s PrintUses CLI under the hood for rules inference. By default it uses R8 version 1.6.53 . If you want to customize what version is used, you can specify the dependency via the keeperR8 configuration. Note that these must be tags from R8\u2019s r8-releases/raw maven repo. dependencies { keeperR8 \"com.android.tools:r8:x.y.z\" } Snapshots of the development version are available in Sonatype\u2019s snapshots repository . Dynamic Configuration \u00b6 As mentioned above, Keeper\u2019s default behavior with no configuration will enable it for all androidTest variants. This may not be what you want for your actual production builds that you plan to distribute. Normally, your app variant\u2019s minification task doesn\u2019t depend on compilation of its corresponding androidTest variant. This means you can call assembleRelease and assembleAndroidTestRelease won\u2019t inherently run. Keeper, however, changes this since it requires the compiled androidTest sources in order to correctly infer how they use APIs in the app variant. For a production build, you likely do want these \u201ctest-only\u201d APIs removed if possible though. There are a few patterns to better control this behavior via Gradle property. Let\u2019s assume an example command to build a production app with custom property productionBuild . ./gradlew :myapp:assembleRelease -PproductionBuild = true Use the testBuildType option \u00b6 If you avoid setting your testBuildType to your \u201crelease\u201d build type in a production build, then Keeper won\u2019t configure your release artifact to depend on test sources since your release variant would no longer be the testedVariant of any androidTest variants. This is the recommended solution. android { // ... if ( hasProperty ( \"productionBuild\" )) { testBuildType = \"debug\" } else { // You would have had to have been doing something like this anyway if you're using Keeper! testBuildType = \"release\" } } Avoid applying the plugin entirely \u00b6 This is probably the simplest approach, but not as dynamic as controlling the testBuildType . if (! hasProperty ( \"productionBuild\" )) { apply plugin: ' com . slack . keeper } \u00b6 Everyone\u2019s project is different, so you should do whatever works for you! We\u2019re open to suggestions of better ways to support configuration for this, so please do file issues if you have any proposals. Under the hood \u00b6 The general logic flow: - Create a custom r8 configuration for the R8 dependency. - Register two jar tasks per androidTest variant. One for all the classes in its target testedVariant and one for all the classes in the androidTest variant itself. This will use their variant-provided JavaCompile tasks and KotlinCompile tasks if available. - Register a infer${androidTestVariant}UsageForKeeper task that plugs the two aforementioned jars into R8\u2019s PrintUses CLI and outputs the inferred proguard rules into a new intermediate .pro file. - Finally - the generated file is wired in to Proguard/R8 via private task APIs and setting their configurationFiles to include our generated one. Appropriate task dependencies (via inputs/outputs, not dependsOn ) are set up, so this is automatically run as part of the target app variant\u2019s full minified APK. The tasks themselves take roughly ~20 seconds total extra work in our Slack android app, with the infer and app jar tasks each taking around 8-10 seconds and the androidTest jar taking around 2 seconds. License \u00b6 Copyright (C) 2020 Slack Technologies, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#keeper","text":"A Gradle plugin that infers Proguard/R8 keep rules for androidTest sources. Keeper hooks into Proguard/R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. This is necessary because the Android Gradle Plugin (AGP) does not currently factor in androidTest usages of target app sources when running the minification step, which can result in runtime errors if APIs used by tests are removed. This is (really) useful only if you run your instrumentation tests against your minified release builds! If you don\u2019t run these tests against minified builds, then you don\u2019t need this plugin. The build type that you test against is controlled by the testBuildType flag, which is set to debug by default. This is a workaround until AGP supports this: https://issuetracker.google.com/issues/126429384 . Note: Keeper uses private APIs from AGP and could break between releases. It is currently tested against AGP versions 3.5.3, 3.6.0-rc01, and 4.0.0-alpha09 (or whatever ci_agp_version env vars are described here .","title":"\ud83e\udd45 Keeper"},{"location":"#installation","text":"Keeper is distributed via Maven Central. Apply the keeper Gradle plugin in your application\u2019s build.gradle. buildscript { dependencies { classpath \"com.slack.keeper:keeper:x.y.z\" } } apply plugin: \"com.slack.keeper\" There are optional configurations available via the keeper extension, mostly just for debugging purposes or setting a custom R8 version. keeper { /** * R8 version, only used for PrintUses and does _not_ override the R8 version used for * minification. Must be a tag. Default defined below. */ r8Version = \"1.6.53\" /** * Optional custom jvm arguments to pass into the R8 `PrintUses` execution. Useful if you want * to enable debugging in R8. Default is empty. * * Example: `listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\")` */ r8JvmArgs = [] } Keeper uses R8\u2019s PrintUses CLI under the hood for rules inference. By default it uses R8 version 1.6.53 . If you want to customize what version is used, you can specify the dependency via the keeperR8 configuration. Note that these must be tags from R8\u2019s r8-releases/raw maven repo. dependencies { keeperR8 \"com.android.tools:r8:x.y.z\" } Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Installation"},{"location":"#dynamic-configuration","text":"As mentioned above, Keeper\u2019s default behavior with no configuration will enable it for all androidTest variants. This may not be what you want for your actual production builds that you plan to distribute. Normally, your app variant\u2019s minification task doesn\u2019t depend on compilation of its corresponding androidTest variant. This means you can call assembleRelease and assembleAndroidTestRelease won\u2019t inherently run. Keeper, however, changes this since it requires the compiled androidTest sources in order to correctly infer how they use APIs in the app variant. For a production build, you likely do want these \u201ctest-only\u201d APIs removed if possible though. There are a few patterns to better control this behavior via Gradle property. Let\u2019s assume an example command to build a production app with custom property productionBuild . ./gradlew :myapp:assembleRelease -PproductionBuild = true","title":"Dynamic Configuration"},{"location":"#use-the-testbuildtype-option","text":"If you avoid setting your testBuildType to your \u201crelease\u201d build type in a production build, then Keeper won\u2019t configure your release artifact to depend on test sources since your release variant would no longer be the testedVariant of any androidTest variants. This is the recommended solution. android { // ... if ( hasProperty ( \"productionBuild\" )) { testBuildType = \"debug\" } else { // You would have had to have been doing something like this anyway if you're using Keeper! testBuildType = \"release\" } }","title":"Use the testBuildType option"},{"location":"#avoid-applying-the-plugin-entirely","text":"This is probably the simplest approach, but not as dynamic as controlling the testBuildType . if (! hasProperty ( \"productionBuild\" )) { apply plugin: ' com . slack . keeper }","title":"Avoid applying the plugin entirely"},{"location":"#under-the-hood","text":"The general logic flow: - Create a custom r8 configuration for the R8 dependency. - Register two jar tasks per androidTest variant. One for all the classes in its target testedVariant and one for all the classes in the androidTest variant itself. This will use their variant-provided JavaCompile tasks and KotlinCompile tasks if available. - Register a infer${androidTestVariant}UsageForKeeper task that plugs the two aforementioned jars into R8\u2019s PrintUses CLI and outputs the inferred proguard rules into a new intermediate .pro file. - Finally - the generated file is wired in to Proguard/R8 via private task APIs and setting their configurationFiles to include our generated one. Appropriate task dependencies (via inputs/outputs, not dependsOn ) are set up, so this is automatically run as part of the target app variant\u2019s full minified APK. The tasks themselves take roughly ~20 seconds total extra work in our Slack android app, with the infer and app jar tasks each taking around 8-10 seconds and the androidTest jar taking around 2 seconds.","title":"Under the hood"},{"location":"#license","text":"Copyright (C) 2020 Slack Technologies, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 0.1.0 (work in progress) \u00b6","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#010-work-in-progress","text":"","title":"0.1.0 (work in progress)"},{"location":"code-of-conduct/","text":"Code of Conduct \u00b6 Introduction \u00b6 Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand. Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic. This code and related pro`cedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members. For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct","title":"Code of Conduct"},{"location":"code-of-conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code-of-conduct/#introduction","text":"Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand. Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic. This code and related pro`cedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members. For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct","title":"Introduction"}]}